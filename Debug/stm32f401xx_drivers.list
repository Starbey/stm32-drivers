
stm32f401xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b0c  08000b0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b18  08000b18  00010b20  2**0
                  CONTENTS
  4 .ARM          00000000  08000b18  08000b18  00010b20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b18  08000b20  00010b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b18  08000b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b20  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010b50  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000146c  00000000  00000000  00010b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050d  00000000  00000000  00011fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00012510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000128  00000000  00000000  000126a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022ca  00000000  00000000  000127d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ab6  00000000  00000000  00014a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009292  00000000  00000000  00016550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005f4  00000000  00000000  0001f7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0001fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000af4 	.word	0x08000af4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000af4 	.word	0x08000af4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <GPIO_PeriClockControl>:
 *
 * @Note              -  n/a

 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enOrDi){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	460b      	mov	r3, r1
 80001ee:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d141      	bne.n	800027a <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a43      	ldr	r2, [pc, #268]	; (8000308 <GPIO_PeriClockControl+0x124>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d106      	bne.n	800020c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80001fe:	4b43      	ldr	r3, [pc, #268]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	4a42      	ldr	r2, [pc, #264]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 800020a:	e077      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB) {
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a40      	ldr	r2, [pc, #256]	; (8000310 <GPIO_PeriClockControl+0x12c>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d106      	bne.n	8000222 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000214:	4b3d      	ldr	r3, [pc, #244]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a3c      	ldr	r2, [pc, #240]	; (800030c <GPIO_PeriClockControl+0x128>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000220:	e06c      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC) {
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a3b      	ldr	r2, [pc, #236]	; (8000314 <GPIO_PeriClockControl+0x130>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d106      	bne.n	8000238 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022a:	4b38      	ldr	r3, [pc, #224]	; (800030c <GPIO_PeriClockControl+0x128>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022e:	4a37      	ldr	r2, [pc, #220]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000236:	e061      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a37      	ldr	r2, [pc, #220]	; (8000318 <GPIO_PeriClockControl+0x134>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d106      	bne.n	800024e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000240:	4b32      	ldr	r3, [pc, #200]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a31      	ldr	r2, [pc, #196]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024c:	e056      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE) {
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a32      	ldr	r2, [pc, #200]	; (800031c <GPIO_PeriClockControl+0x138>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d106      	bne.n	8000264 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000256:	4b2d      	ldr	r3, [pc, #180]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	4a2c      	ldr	r2, [pc, #176]	; (800030c <GPIO_PeriClockControl+0x128>)
 800025c:	f043 0310 	orr.w	r3, r3, #16
 8000260:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000262:	e04b      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <GPIO_PeriClockControl+0x13c>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d147      	bne.n	80002fc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 800026c:	4b27      	ldr	r3, [pc, #156]	; (800030c <GPIO_PeriClockControl+0x128>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a26      	ldr	r2, [pc, #152]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000278:	e040      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a22      	ldr	r2, [pc, #136]	; (8000308 <GPIO_PeriClockControl+0x124>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000282:	4b22      	ldr	r3, [pc, #136]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000286:	4a21      	ldr	r2, [pc, #132]	; (800030c <GPIO_PeriClockControl+0x128>)
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800028e:	e035      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4a1f      	ldr	r2, [pc, #124]	; (8000310 <GPIO_PeriClockControl+0x12c>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d106      	bne.n	80002a6 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <GPIO_PeriClockControl+0x128>)
 800029a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <GPIO_PeriClockControl+0x128>)
 800029e:	f023 0302 	bic.w	r3, r3, #2
 80002a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002a4:	e02a      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC) {
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <GPIO_PeriClockControl+0x130>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d106      	bne.n	80002bc <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b2:	4a16      	ldr	r2, [pc, #88]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002b4:	f023 0304 	bic.w	r3, r3, #4
 80002b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002ba:	e01f      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD) {
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a16      	ldr	r2, [pc, #88]	; (8000318 <GPIO_PeriClockControl+0x134>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d106      	bne.n	80002d2 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c8:	4a10      	ldr	r2, [pc, #64]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002ca:	f023 0308 	bic.w	r3, r3, #8
 80002ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002d0:	e014      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE) {
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <GPIO_PeriClockControl+0x138>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002e0:	f023 0310 	bic.w	r3, r3, #16
 80002e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002e6:	e009      	b.n	80002fc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <GPIO_PeriClockControl+0x13c>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d105      	bne.n	80002fc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <GPIO_PeriClockControl+0x128>)
 80002f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40020000 	.word	0x40020000
 800030c:	40023800 	.word	0x40023800
 8000310:	40020400 	.word	0x40020400
 8000314:	40020800 	.word	0x40020800
 8000318:	40020c00 	.word	0x40020c00
 800031c:	40021000 	.word	0x40021000
 8000320:	40021c00 	.word	0x40021c00

08000324 <GPIO_Init>:
 * @return            -  void
 *
 * @Note              -  n/a

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp register
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]

	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2101      	movs	r1, #1
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff54 	bl	80001e4 <GPIO_PeriClockControl>

	//configure mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){ //non-it mode
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	795b      	ldrb	r3, [r3, #5]
 8000340:	2b03      	cmp	r3, #3
 8000342:	d81f      	bhi.n	8000384 <GPIO_Init+0x60>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //multiplied by 2 bc pin modes are 2 bits wide
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	795b      	ldrb	r3, [r3, #5]
 8000348:	461a      	mov	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	791b      	ldrb	r3, [r3, #4]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	fa02 f303 	lsl.w	r3, r2, r3
 8000354:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear pin register before setting
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	791b      	ldrb	r3, [r3, #4]
 8000360:	4619      	mov	r1, r3
 8000362:	2303      	movs	r3, #3
 8000364:	408b      	lsls	r3, r1
 8000366:	43db      	mvns	r3, r3
 8000368:	4619      	mov	r1, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	400a      	ands	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	6819      	ldr	r1, [r3, #0]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	430a      	orrs	r2, r1
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	e09a      	b.n	80004ba <GPIO_Init+0x196>
	}
	else { //it mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b04      	cmp	r3, #4
 800038a:	d117      	bne.n	80003bc <GPIO_Init+0x98>
			//configure the falling trigger selection register (FTSR)
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clear corresponding RTSR bit before setting FTSR
 800038c:	4b9a      	ldr	r3, [pc, #616]	; (80005f8 <GPIO_Init+0x2d4>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7912      	ldrb	r2, [r2, #4]
 8000394:	4611      	mov	r1, r2
 8000396:	2201      	movs	r2, #1
 8000398:	408a      	lsls	r2, r1
 800039a:	43d2      	mvns	r2, r2
 800039c:	4611      	mov	r1, r2
 800039e:	4a96      	ldr	r2, [pc, #600]	; (80005f8 <GPIO_Init+0x2d4>)
 80003a0:	400b      	ands	r3, r1
 80003a2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a4:	4b94      	ldr	r3, [pc, #592]	; (80005f8 <GPIO_Init+0x2d4>)
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	7912      	ldrb	r2, [r2, #4]
 80003ac:	4611      	mov	r1, r2
 80003ae:	2201      	movs	r2, #1
 80003b0:	408a      	lsls	r2, r1
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a90      	ldr	r2, [pc, #576]	; (80005f8 <GPIO_Init+0x2d4>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	60d3      	str	r3, [r2, #12]
 80003ba:	e035      	b.n	8000428 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b05      	cmp	r3, #5
 80003c2:	d117      	bne.n	80003f4 <GPIO_Init+0xd0>
			//configure the rising trigger selection register (RTSR)
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clear corresponding FTSR bit before setting RTSR
 80003c4:	4b8c      	ldr	r3, [pc, #560]	; (80005f8 <GPIO_Init+0x2d4>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	7912      	ldrb	r2, [r2, #4]
 80003cc:	4611      	mov	r1, r2
 80003ce:	2201      	movs	r2, #1
 80003d0:	408a      	lsls	r2, r1
 80003d2:	43d2      	mvns	r2, r2
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a88      	ldr	r2, [pc, #544]	; (80005f8 <GPIO_Init+0x2d4>)
 80003d8:	400b      	ands	r3, r1
 80003da:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003dc:	4b86      	ldr	r3, [pc, #536]	; (80005f8 <GPIO_Init+0x2d4>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	7912      	ldrb	r2, [r2, #4]
 80003e4:	4611      	mov	r1, r2
 80003e6:	2201      	movs	r2, #1
 80003e8:	408a      	lsls	r2, r1
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a82      	ldr	r2, [pc, #520]	; (80005f8 <GPIO_Init+0x2d4>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6093      	str	r3, [r2, #8]
 80003f2:	e019      	b.n	8000428 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	795b      	ldrb	r3, [r3, #5]
 80003f8:	2b06      	cmp	r3, #6
 80003fa:	d115      	bne.n	8000428 <GPIO_Init+0x104>
			//configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003fc:	4b7e      	ldr	r3, [pc, #504]	; (80005f8 <GPIO_Init+0x2d4>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	7912      	ldrb	r2, [r2, #4]
 8000404:	4611      	mov	r1, r2
 8000406:	2201      	movs	r2, #1
 8000408:	408a      	lsls	r2, r1
 800040a:	4611      	mov	r1, r2
 800040c:	4a7a      	ldr	r2, [pc, #488]	; (80005f8 <GPIO_Init+0x2d4>)
 800040e:	430b      	orrs	r3, r1
 8000410:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000412:	4b79      	ldr	r3, [pc, #484]	; (80005f8 <GPIO_Init+0x2d4>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7912      	ldrb	r2, [r2, #4]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	4611      	mov	r1, r2
 8000422:	4a75      	ldr	r2, [pc, #468]	; (80005f8 <GPIO_Init+0x2d4>)
 8000424:	430b      	orrs	r3, r1
 8000426:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSFCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	089b      	lsrs	r3, r3, #2
 800042e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	f003 0303 	and.w	r3, r3, #3
 8000438:	74bb      	strb	r3, [r7, #18]
		uint8_t portNum = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a6f      	ldr	r2, [pc, #444]	; (80005fc <GPIO_Init+0x2d8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d01d      	beq.n	8000480 <GPIO_Init+0x15c>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a6d      	ldr	r2, [pc, #436]	; (8000600 <GPIO_Init+0x2dc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d016      	beq.n	800047c <GPIO_Init+0x158>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a6c      	ldr	r2, [pc, #432]	; (8000604 <GPIO_Init+0x2e0>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d00f      	beq.n	8000478 <GPIO_Init+0x154>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a6a      	ldr	r2, [pc, #424]	; (8000608 <GPIO_Init+0x2e4>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d008      	beq.n	8000474 <GPIO_Init+0x150>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a69      	ldr	r2, [pc, #420]	; (800060c <GPIO_Init+0x2e8>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d101      	bne.n	8000470 <GPIO_Init+0x14c>
 800046c:	2307      	movs	r3, #7
 800046e:	e008      	b.n	8000482 <GPIO_Init+0x15e>
 8000470:	2300      	movs	r3, #0
 8000472:	e006      	b.n	8000482 <GPIO_Init+0x15e>
 8000474:	2303      	movs	r3, #3
 8000476:	e004      	b.n	8000482 <GPIO_Init+0x15e>
 8000478:	2302      	movs	r3, #2
 800047a:	e002      	b.n	8000482 <GPIO_Init+0x15e>
 800047c:	2301      	movs	r3, #1
 800047e:	e000      	b.n	8000482 <GPIO_Init+0x15e>
 8000480:	2300      	movs	r3, #0
 8000482:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 8000484:	4b62      	ldr	r3, [pc, #392]	; (8000610 <GPIO_Init+0x2ec>)
 8000486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000488:	4a61      	ldr	r2, [pc, #388]	; (8000610 <GPIO_Init+0x2ec>)
 800048a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portNum << (4 * temp2);
 8000490:	7c7a      	ldrb	r2, [r7, #17]
 8000492:	7cbb      	ldrb	r3, [r7, #18]
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	fa02 f103 	lsl.w	r1, r2, r3
 800049a:	4a5e      	ldr	r2, [pc, #376]	; (8000614 <GPIO_Init+0x2f0>)
 800049c:	7cfb      	ldrb	r3, [r7, #19]
 800049e:	3302      	adds	r3, #2
 80004a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//enable the EXTI interrupt delivery using the interrupt mask register (IMR)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a4:	4b54      	ldr	r3, [pc, #336]	; (80005f8 <GPIO_Init+0x2d4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a50      	ldr	r2, [pc, #320]	; (80005f8 <GPIO_Init+0x2d4>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]

	//configure speed of GPIO pin
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	799b      	ldrb	r3, [r3, #6]
 80004c2:	461a      	mov	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	4619      	mov	r1, r3
 80004dc:	2303      	movs	r3, #3
 80004de:	408b      	lsls	r3, r1
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4619      	mov	r1, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	400a      	ands	r2, r1
 80004ea:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6899      	ldr	r1, [r3, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	609a      	str	r2, [r3, #8]
	temp = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

	//configure pull-up/pull-down settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	79db      	ldrb	r3, [r3, #7]
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	4619      	mov	r1, r3
 800051e:	2303      	movs	r3, #3
 8000520:	408b      	lsls	r3, r1
 8000522:	43db      	mvns	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	400a      	ands	r2, r1
 800052c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68d9      	ldr	r1, [r3, #12]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	430a      	orrs	r2, r1
 800053c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]

	//configure the output type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7a1b      	ldrb	r3, [r3, #8]
 8000546:	461a      	mov	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	4619      	mov	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	400a      	ands	r2, r1
 800056c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	6859      	ldr	r1, [r3, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	697a      	ldr	r2, [r7, #20]
 800057a:	430a      	orrs	r2, r1
 800057c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]

	//configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	795b      	ldrb	r3, [r3, #5]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d131      	bne.n	80005ee <GPIO_Init+0x2ca>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2) );
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7c3a      	ldrb	r2, [r7, #16]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	220f      	movs	r2, #15
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7c3a      	ldrb	r2, [r7, #16]
 80005bc:	4001      	ands	r1, r0
 80005be:	3208      	adds	r2, #8
 80005c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2) );
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	7c3a      	ldrb	r2, [r7, #16]
 80005ca:	3208      	adds	r2, #8
 80005cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7a5b      	ldrb	r3, [r3, #9]
 80005d4:	461a      	mov	r2, r3
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	7c3a      	ldrb	r2, [r7, #16]
 80005e6:	4301      	orrs	r1, r0
 80005e8:	3208      	adds	r2, #8
 80005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40013c00 	.word	0x40013c00
 80005fc:	40020000 	.word	0x40020000
 8000600:	40020400 	.word	0x40020400
 8000604:	40020800 	.word	0x40020800
 8000608:	40020c00 	.word	0x40020c00
 800060c:	40021c00 	.word	0x40021c00
 8000610:	40023800 	.word	0x40023800
 8000614:	40013800 	.word	0x40013800

08000618 <GPIO_ReadFromInputPin>:
 *
 * @Note              -  n/a

 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	return ( (uint8_t) (pGPIOx->IDR >> pinNumber) & 0x1 ); //returns LSB
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	691a      	ldr	r2, [r3, #16]
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	fa22 f303 	lsr.w	r3, r2, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <SPI_PeriClockControl>:
static void SPI_TXE_Interrupt_Handle(SPI_Handle_t *pSPIHandle);
static void SPI_RXNE_Interrupt_Handle(SPI_Handle_t *pSPIHandle);
static void SPI_OVR_ERR_Interrupt_Handle(SPI_Handle_t *pSPIHandle);

/* peripheral clock setup */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enOrDi){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d12b      	bne.n	80006ae <SPI_PeriClockControl+0x6a>
		if (pSPIx == SPI1){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <SPI_PeriClockControl+0xcc>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d106      	bne.n	800066c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <SPI_PeriClockControl+0xd0>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <SPI_PeriClockControl+0xd0>)
 8000664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 800066a:	e04b      	b.n	8000704 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI2){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <SPI_PeriClockControl+0xd4>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d106      	bne.n	8000682 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <SPI_PeriClockControl+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <SPI_PeriClockControl+0xd0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000680:	e040      	b.n	8000704 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI3){
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a25      	ldr	r2, [pc, #148]	; (800071c <SPI_PeriClockControl+0xd8>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d106      	bne.n	8000698 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SPI_PeriClockControl+0xd0>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SPI_PeriClockControl+0xd0>)
 8000690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000696:	e035      	b.n	8000704 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI4){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SPI_PeriClockControl+0xdc>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d131      	bne.n	8000704 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006aa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006ac:	e02a      	b.n	8000704 <SPI_PeriClockControl+0xc0>
		if (pSPIx == SPI1){
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a17      	ldr	r2, [pc, #92]	; (8000710 <SPI_PeriClockControl+0xcc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006c2:	e01f      	b.n	8000704 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI2){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <SPI_PeriClockControl+0xd4>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d106      	bne.n	80006da <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a10      	ldr	r2, [pc, #64]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006d8:	e014      	b.n	8000704 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI3){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <SPI_PeriClockControl+0xd8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006ee:	e009      	b.n	8000704 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI4){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <SPI_PeriClockControl+0xdc>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d105      	bne.n	8000704 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <SPI_PeriClockControl+0xd0>)
 80006fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000702:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40013000 	.word	0x40013000
 8000714:	40023800 	.word	0x40023800
 8000718:	40003800 	.word	0x40003800
 800071c:	40003c00 	.word	0x40003c00
 8000720:	40013400 	.word	0x40013400

08000724 <SPI_Init>:

/* init and deinit */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff86 	bl	8000644 <SPI_PeriClockControl>

	//config. SPI_CR1 register

	uint32_t tempReg = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]

	//1. config device mode
	tempReg |= pSPIHandle->spiConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4313      	orrs	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]

	//2. config bus
	if (pSPIHandle->spiConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d104      	bne.n	800075c <SPI_Init+0x38>
		//reset BIDI mode
		tempReg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e014      	b.n	8000786 <SPI_Init+0x62>
	}
	else if (pSPIHandle->spiConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	795b      	ldrb	r3, [r3, #5]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d104      	bne.n	800076e <SPI_Init+0x4a>
		//set BIDI mode
		tempReg |= (1 << SPI_CR1_BIDI_MODE);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e00b      	b.n	8000786 <SPI_Init+0x62>
	}
	else if (pSPIHandle->spiConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	2b03      	cmp	r3, #3
 8000774:	d107      	bne.n	8000786 <SPI_Init+0x62>
		//clear BIDI mode and set RX-only bit
		tempReg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800077c:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << SPI_CR1_RX_ONLY);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000784:	60fb      	str	r3, [r7, #12]
	}

	//3. config serial clock speed
	tempReg |= pSPIHandle->spiConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	799b      	ldrb	r3, [r3, #6]
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4313      	orrs	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]

	//4. configure DFF
	tempReg |= pSPIHandle->spiConfig.SPI_DFF << SPI_CR1_DFF;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	79db      	ldrb	r3, [r3, #7]
 8000798:	02db      	lsls	r3, r3, #11
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4313      	orrs	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]

	//5. configure CPOL
	tempReg |= pSPIHandle->spiConfig.SPI_CPOL << SPI_CR1_CPOL;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7a1b      	ldrb	r3, [r3, #8]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	461a      	mov	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

	//6. configure CPHA
	tempReg |= pSPIHandle->spiConfig.SPI_CPHA << SPI_CR1_CPHA;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7a5b      	ldrb	r3, [r3, #9]
 80007b4:	461a      	mov	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SPI_GetFlagStatus>:
	else if (pSPIx == SPI4) {
		SPI4_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flag) return FLAG_SET;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689a      	ldr	r2, [r3, #8]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	4013      	ands	r3, r2
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SPI_GetFlagStatus+0x1a>
 80007e2:	2301      	movs	r3, #1
 80007e4:	e000      	b.n	80007e8 <SPI_GetFlagStatus+0x1c>
	return FLAG_RESET;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SPI_SendData>:

/* data send and receive (blocking)*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	while(len > 0){ //blocks until all bytes have been transferred
 8000800:	e024      	b.n	800084c <SPI_SendData+0x58>
		//wait until TXE is set
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000802:	bf00      	nop
 8000804:	2102      	movs	r1, #2
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff ffe0 	bl	80007cc <SPI_GetFlagStatus>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f8      	beq.n	8000804 <SPI_SendData+0x10>

		//check DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF) ){
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <SPI_SendData+0x42>
			//config for 16-bit DFF
			pSPIx->DR = *( (uint16_t*) pTxBuffer); //typecast into uint16_t pointer first, then dereference to convert 8-bit to 16-bit
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	60da      	str	r2, [r3, #12]
			len-=2;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b02      	subs	r3, #2
 800082c:	607b      	str	r3, [r7, #4]
			pTxBuffer+=2; //increment by 2 because 2 bytes of data has been transferred
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3302      	adds	r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	e00a      	b.n	800084c <SPI_SendData+0x58>
		}
		else {
			//config for 8-bit DFF
			pSPIx->DR = *pTxBuffer;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	60da      	str	r2, [r3, #12]
			len--;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
			pTxBuffer++; //increment by 1 because 1 byte of data has been transferred
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	3301      	adds	r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
	while(len > 0){ //blocks until all bytes have been transferred
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1d7      	bne.n	8000802 <SPI_SendData+0xe>

		}
	}
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <SPI_PeripheralControl>:
		SPI_OVR_ERR_Interrupt_Handle(pSPIHandle);
	}
}

/* en/di SPIx peripheral */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t enOrDi){
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d106      	bne.n	800087c <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	601a      	str	r2, [r3, #0]
	}
	else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 800087a:	e005      	b.n	8000888 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	601a      	str	r2, [r3, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

/* configures SSOE for non-multi-master scenario */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t enOrDi){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d106      	bne.n	80008b4 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f043 0204 	orr.w	r2, r3, #4
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	605a      	str	r2, [r3, #4]
	}
	else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80008b2:	e005      	b.n	80008c0 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f023 0204 	bic.w	r2, r3, #4
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	605a      	str	r2, [r3, #4]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <delay>:
//PB14 --> MISO
//PB13 --> SCLK
//PB12 --> NSS
//alt. function mode: 5

void delay(void){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
	for (uint32_t i = 0 ; i < 500000 ; i ++);
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e002      	b.n	80008de <delay+0x12>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <delay+0x28>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d9f8      	bls.n	80008d8 <delay+0xc>
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	0007a11f 	.word	0x0007a11f

080008f8 <SPI2_GPIOInits>:

void SPI2_GPIOInits(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiPins;

	spiPins.pGPIOx = GPIOB;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <SPI2_GPIOInits+0x4c>)
 8000900:	607b      	str	r3, [r7, #4]
	spiPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000902:	2302      	movs	r3, #2
 8000904:	727b      	strb	r3, [r7, #9]
	spiPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000906:	2305      	movs	r3, #5
 8000908:	737b      	strb	r3, [r7, #13]
	spiPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800090a:	2300      	movs	r3, #0
 800090c:	733b      	strb	r3, [r7, #12]
	spiPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800090e:	2300      	movs	r3, #0
 8000910:	72fb      	strb	r3, [r7, #11]
	spiPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000912:	2302      	movs	r3, #2
 8000914:	72bb      	strb	r3, [r7, #10]

	//SCLK
	spiPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000916:	230d      	movs	r3, #13
 8000918:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spiPins);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fd01 	bl	8000324 <GPIO_Init>

	//MOSI
	spiPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000922:	230f      	movs	r3, #15
 8000924:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spiPins);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fcfb 	bl	8000324 <GPIO_Init>
	//MISO (unneeded)
	/*spiPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	GPIO_Init(&spiPins);*/

	//NSS
	spiPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800092e:	230c      	movs	r3, #12
 8000930:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spiPins);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fcf5 	bl	8000324 <GPIO_Init>
}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40020400 	.word	0x40020400

08000948 <SPI2_Inits>:

void SPI2_Inits(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
	SPI_Handle_t spi2Handle;
	spi2Handle.pSPIx = SPI2;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <SPI2_Inits+0x44>)
 8000950:	603b      	str	r3, [r7, #0]
	spi2Handle.spiConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000952:	2301      	movs	r3, #1
 8000954:	717b      	strb	r3, [r7, #5]
	spi2Handle.spiConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000956:	2301      	movs	r3, #1
 8000958:	713b      	strb	r3, [r7, #4]
	spi2Handle.spiConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //16 MHz APB1 clock / 8 = 2 MHz SCLK
 800095a:	2302      	movs	r3, #2
 800095c:	71bb      	strb	r3, [r7, #6]
	spi2Handle.spiConfig.SPI_DFF = SPI_DFF_8BITS;
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
	spi2Handle.spiConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	723b      	strb	r3, [r7, #8]
	spi2Handle.spiConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	727b      	strb	r3, [r7, #9]
	spi2Handle.spiConfig.SPI_SSM = SPI_SSM_DI; //hardware slave management enabled for NSS pin
 800096a:	2300      	movs	r3, #0
 800096c:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&spi2Handle); //initializes SPI2 peripheral
 800096e:	463b      	mov	r3, r7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fed7 	bl	8000724 <SPI_Init>
	spi2Handle.pSPIx->CR2 |= (1 << SPI_CR2_SSOE); //forces CR1 in master mode
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	f042 0204 	orr.w	r2, r2, #4
 8000980:	605a      	str	r2, [r3, #4]
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40003800 	.word	0x40003800

08000990 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
	//button configuration (PC13)
	GPIO_Handle_t gpioBtn;
	gpioBtn.pGPIOx = GPIOC;
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <GPIO_ButtonInit+0x30>)
 8000998:	607b      	str	r3, [r7, #4]
	gpioBtn.GPIO_PinConfig.GPIO_PinNumber = 13;
 800099a:	230d      	movs	r3, #13
 800099c:	723b      	strb	r3, [r7, #8]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800099e:	2300      	movs	r3, #0
 80009a0:	727b      	strb	r3, [r7, #9]
	gpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009a2:	2302      	movs	r3, #2
 80009a4:	72bb      	strb	r3, [r7, #10]
	gpioBtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009a6:	2301      	movs	r3, #1
 80009a8:	733b      	strb	r3, [r7, #12]
	gpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009aa:	2300      	movs	r3, #0
 80009ac:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&gpioBtn);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fcb7 	bl	8000324 <GPIO_Init>
	//note that clock is enabled in GPIO_Init
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020800 	.word	0x40020800

080009c4 <main>:

int main(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
	char strTx[] = "Hello world"; //Tx buffer
 80009ca:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <main+0x88>)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 80009d4:	f7ff ffdc 	bl	8000990 <GPIO_ButtonInit>

	SPI2_GPIOInits();
 80009d8:	f7ff ff8e 	bl	80008f8 <SPI2_GPIOInits>
	SPI2_Inits();
 80009dc:	f7ff ffb4 	bl	8000948 <SPI2_Inits>
	SPI_SSOEConfig(SPI2, ENABLE);
 80009e0:	2101      	movs	r1, #1
 80009e2:	481b      	ldr	r0, [pc, #108]	; (8000a50 <main+0x8c>)
 80009e4:	f7ff ff56 	bl	8000894 <SPI_SSOEConfig>

	while(1){
		while (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_UNPRESSED);
 80009e8:	bf00      	nop
 80009ea:	210d      	movs	r1, #13
 80009ec:	4819      	ldr	r0, [pc, #100]	; (8000a54 <main+0x90>)
 80009ee:	f7ff fe13 	bl	8000618 <GPIO_ReadFromInputPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d0f8      	beq.n	80009ea <main+0x26>
		delay();
 80009f8:	f7ff ff68 	bl	80008cc <delay>

		SPI_PeripheralControl(SPI2, ENABLE); //enable peripheral
 80009fc:	2101      	movs	r1, #1
 80009fe:	4814      	ldr	r0, [pc, #80]	; (8000a50 <main+0x8c>)
 8000a00:	f7ff ff2c 	bl	800085c <SPI_PeripheralControl>

		uint8_t dataLen = strlen(strTx);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fbe4 	bl	80001d4 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &dataLen, 1);//send length of following data (length metadata is only 1 byte long)
 8000a12:	1cfb      	adds	r3, r7, #3
 8000a14:	2201      	movs	r2, #1
 8000a16:	4619      	mov	r1, r3
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <main+0x8c>)
 8000a1a:	f7ff feeb 	bl	80007f4 <SPI_SendData>

		SPI_SendData(SPI2, (uint8_t*) strTx, strlen(strTx)); //send data
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbd7 	bl	80001d4 <strlen>
 8000a26:	4602      	mov	r2, r0
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <main+0x8c>)
 8000a2e:	f7ff fee1 	bl	80007f4 <SPI_SendData>

		while ( SPI_GetFlagStatus(SPI2, SPI_TXE_BSY_FLAG) ); //check if SPI is not busy
 8000a32:	bf00      	nop
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <main+0x8c>)
 8000a38:	f7ff fec8 	bl	80007cc <SPI_GetFlagStatus>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f8      	bne.n	8000a34 <main+0x70>

		SPI_PeripheralControl(SPI2, DISABLE); //disable peripheral
 8000a42:	2100      	movs	r1, #0
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <main+0x8c>)
 8000a46:	f7ff ff09 	bl	800085c <SPI_PeripheralControl>
	while(1){
 8000a4a:	e7cd      	b.n	80009e8 <main+0x24>
 8000a4c:	08000b0c 	.word	0x08000b0c
 8000a50:	40003800 	.word	0x40003800
 8000a54:	40020800 	.word	0x40020800

08000a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a86:	f000 f811 	bl	8000aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff ff9b 	bl	80009c4 <main>

08000a8e <LoopForever>:

LoopForever:
  b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   r0, =_estack
 8000a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a9c:	08000b20 	.word	0x08000b20
  ldr r2, =_sbss
 8000aa0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000aa4:	2000001c 	.word	0x2000001c

08000aa8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <__libc_init_array>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4d0d      	ldr	r5, [pc, #52]	; (8000ae4 <__libc_init_array+0x38>)
 8000ab0:	4c0d      	ldr	r4, [pc, #52]	; (8000ae8 <__libc_init_array+0x3c>)
 8000ab2:	1b64      	subs	r4, r4, r5
 8000ab4:	10a4      	asrs	r4, r4, #2
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	42a6      	cmp	r6, r4
 8000aba:	d109      	bne.n	8000ad0 <__libc_init_array+0x24>
 8000abc:	4d0b      	ldr	r5, [pc, #44]	; (8000aec <__libc_init_array+0x40>)
 8000abe:	4c0c      	ldr	r4, [pc, #48]	; (8000af0 <__libc_init_array+0x44>)
 8000ac0:	f000 f818 	bl	8000af4 <_init>
 8000ac4:	1b64      	subs	r4, r4, r5
 8000ac6:	10a4      	asrs	r4, r4, #2
 8000ac8:	2600      	movs	r6, #0
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d105      	bne.n	8000ada <__libc_init_array+0x2e>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad4:	4798      	blx	r3
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	e7ee      	b.n	8000ab8 <__libc_init_array+0xc>
 8000ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ade:	4798      	blx	r3
 8000ae0:	3601      	adds	r6, #1
 8000ae2:	e7f2      	b.n	8000aca <__libc_init_array+0x1e>
 8000ae4:	08000b18 	.word	0x08000b18
 8000ae8:	08000b18 	.word	0x08000b18
 8000aec:	08000b18 	.word	0x08000b18
 8000af0:	08000b1c 	.word	0x08000b1c

08000af4 <_init>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr

08000b00 <_fini>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr
